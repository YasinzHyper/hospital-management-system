services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: hospital-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: hospital_management
      MYSQL_USER: hospital_user
      MYSQL_PASSWORD: hospital_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hospital-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: hospital-backend
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: mysql
      DB_USER: hospital_user
      DB_PASS: hospital_password
      DB_NAME: hospital_management
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_ACCESS_EXPIRATION_MINUTES: 60
      JWT_REFRESH_EXPIRATION_DAYS: 30
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_USE_PASSWORD: no
      LOG_FOLDER: logs/
      LOG_FILE: app-log.log
      LOG_LEVEL: info
    ports:
      - "5000:5000"
    volumes:
      - ./server/logs:/usr/src/app/logs
      - ./server/src:/usr/src/app/src
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hospital-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    container_name: hospital-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:5000/api
    volumes:
      - ./client/src:/app/src
    depends_on:
      - backend
    networks:
      - hospital-network
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:

networks:
  hospital-network:
    driver: bridge
